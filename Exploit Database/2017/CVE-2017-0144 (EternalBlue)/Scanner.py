import socket
import argparse

# Function to craft and send the NetBIOS session request packet
def send_packet(ip_address, port):
    # Create a socket object
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.settimeout(3)
    
    # Connect to the SMB server
    try:
        client.connect((ip_address, port))
    except:
        print(f"[-] Unable to connect to {ip_address}:{port}")
        return
    
    # Craft the NetBIOS session request packet
    packet = b"\x00\x00\x00\x90"  # Packet length
    packet += b"\xff\x53\x4d\x42"  # SMB signature
    packet += b"\x72\x00\x00\x00"  # Session setup command
    packet += b"\x00\x18\x53\xc8"  # Session setup flags
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00"  # Reserved
    packet += b"\x00\x00\x00\x00\xff\xff\xff\xfe"  # NTLMSSP header
    packet += b"\x00\x00\x00\x06\x01\xb1\x00\x00"  # NTLMSSP setup
    packet += b"\x00\x00\x00\x0f"  # Unicode string length
    packet += b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"  # Unicode string: "NTLMSSP\0"
    packet += b"\x02\x00\x0c\x00"  # NTLMSSP negotiate message
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00"  # Reserved
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00"  # Reserved
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00"  # Reserved
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00"  # Reserved
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00"  # Reserved
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00"  # Reserved
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00"  # Reserved
    packet += b"\x00\x00\x00\x00"  # Negotiate flags
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00"  # Reserved
    
    # Send the packet to the SMB server
    client.send(packet)
    
    # Receive the response packet
    try:
        response = client.recv(1024)
    except:
        print(f"[-] No response received from {ip_address}:{port}")
        return
    
    # Check if the response packet contains the signature
    if b"\x72\x00\x00\x00" in response:
        print(f"[+] {ip_address}:{port} is vulnerable to MS17-010")
    else:
        print(f"[-] {ip_address}:{port} is not vulnerable to MS17-010")

# Parse command line arguments
# Parse command line arguments
parser = argparse.ArgumentParser(description='MS17-010 vulnerability scanner')
parser.add_argument('--ip', help='IP address of the target system', required=True)
parser.add_argument('--port', help='Port number of the target system', default=445, type=int)
args = parser.parse_args()

# Call the send_packet function with the provided IP and port
send_packet(args.ip, args.port)
